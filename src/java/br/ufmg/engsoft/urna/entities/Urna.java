package br.ufmg.engsoft.urna.entities;

import java.util.UUID;

/**
 * The urna type.
 */
public class Urna {
  /**
   * The id of the urna.
   * When null, the id will be automatically generated by the database.
   */
  public final UUID id;
  /**
   * The senha of the urna. Mustn't be null nor empty.
   */
  private final String senha;

  
  public void iniciarEleicao() {

  }

  public void finalizarEleicao() {

  }

  public void exibirResultado() {

  }

  public void exibirCandidato() {

  }

  public void registrarVoto() {

  }

  /**
   * Builder for Question.
   */
  public static class Builder {
    protected String senha;

    public Builder senha(String senha) {
      this.senha = senha;
      return this;
    }

    /**
     * Build the urna.
     * 
     * @throws IllegalArgumentException if any parameter is invalid
     */
    public Urna build() {
      if (senha == null)
        throw new IllegalArgumentException("senha mustn't be null");

      if (senha.isEmpty())
        throw new IllegalArgumentException("senha mustn't be empty");

      return new Urna(this.senha);
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected Urna(String senha) {
    this.id = UUID.randomUUID();
    this.senha = senha;
  }

  /**
   * Equality comparison.
   * Although this object has an id, equality is checked on all fields.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj == this)
      return true;

    if (!(obj instanceof Urna))
      return false;

    var urna = (Urna) obj;

    return this.id.equals(urna.id)
        && this.senha.equals(urna.senha);
  }

  /**
   * Convert a Question to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Question:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  senha: " + this.senha + "\n");

    return builder.toString();
  }
}
